Proxy design Pattern
---------------------
Types:
* Remote proxy: Responsible for representing the object located remotely. 
                Talking to the real object might involve marshalling and unmarshalling of data and talking to the remote object. 
                All that logic is encapsulated in these proxies and the client application need not worry about them.

* Virtual proxy: Provides some default and instant results if the real object is supposed to take some time to produce results. 
				 These proxies initiate the operation on real objects and provide a default result to the application. 
				 Once the real object is done, these proxies push the actual data to the client where it has provided dummy data earlier.

* Protection proxy: If an application does not have access to some resource then such proxies will talk to the objects in applications that have 
					access to that resource and then get the result back.

* Smart Proxy: Provides additional layer of security by interposing specific actions when the object is accessed. 
			   An example can be to check if the real object is locked before it is accessed to ensure that no other object can change it. 
			   

How to implement
-----------------
* Define a common interface.
* Define a service class which implements the common interface.
* Define a proxy class which implements the same common interface as well as has a reference (composition) to the service class.
* Client uses proxy class thinking that as the service class.
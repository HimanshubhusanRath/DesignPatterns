Bridge Design Pattern
----------------------
* Used to separately maintain two hierarchies which are linked to each other.

Use case
---------
* Remote is a separate hierarchy and it can grow independently e.g. basic remote, remote with additional capabilities, remote with an LED etc.
* Device is a separate hierarchy and it can also grow independently e.g. TV, Radio, AC, Cooler etc.
* A remote is nothing but an abstraction of the controlling capabilities for a device e.g. switing it on/off, volume up/down, temperature up/down etc.
  but, in real these functionalities are available in the device.
* So, we can consider remote as an abstraction and the device as the actual implementation here.

How bridge pattern is applied here
-----------------------------------
* To use bridge pattern here, we can define an interface as REMOTE and another interface as DEVICE.
* REMOTE will have a reference to DEVICE (composition) and both the hierarchies can grow independent of each other.
* Client needs to mention the device while defining the remote so that the remote can be used to operate on that particular device.
* With this, one remote object can be used to operate on multiple devices by simply injecting different device objects.
